# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named mS_MarkerRemoval_AdvancedExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from mS_MarkerRemoval_AdvancedExt import *
except ImportError:
    pass

def getPluginID():
    return "natron.community.plugins.mS_MarkerRemoval_Advanced"

def getLabel():
    return "mS_MarkerRemoval_Advanced"

def getVersion():
    return 1

def getIconPath():
    return "mS_MarkerRemoval_Advanced.png"

def getGrouping():
    return "Community/mS"

def getPluginDescription():
    return "Lets you easily remove tracking markers from backing screens without the hassle of painting, even when they intersect with the foreground elements."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "Controls")
    param = lastNode.createStringParam("sep01", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createStringParam("sep02", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createSeparatorParam("mS_Marker_Removal_Advanced", "mS_MarkerRemoval_Advanced")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.mS_Marker_Removal_Advanced = param
    del param

    param = lastNode.createStringParam("sep03", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep03 = param
    del param

    param = lastNode.createStringParam("sep04", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep04 = param
    del param

    param = lastNode.createSeparatorParam("line01", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line01 = param
    del param

    param = lastNode.createChoiceParam("View", "View")
    entries = [ ("Source", ""),
    ("Pre-Grade Markers", ""),
    ("Restore Channel", ""),
    ("Screen Keyer", ""),
    ("Final Matte", ""),
    ("Result", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.View = param
    del param

    param = lastNode.createStringParam("sep05", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep05 = param
    del param

    param = lastNode.createSeparatorParam("line02", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line02 = param
    del param

    param = lastNode.createChoiceParam("markersColor", "Markers Color")
    entries = [ ("Orange on Green-Screen", ""),
    ("Green on Blue-Screen", ""),
    ("Blue on Green-Screen", ""),
    ("Pink on Blue-Screen", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.markersColor = param
    del param

    param = lastNode.createStringParam("sep06", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep06 = param
    del param

    param = lastNode.createSeparatorParam("line03", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line03 = param
    del param

    param = lastNode.createGroupParam("Pre_Grade_Markers", "Pre-Grade Markers")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    lastNode.Pre_Grade_Markers = param
    del param

    param = lastNode.createParametricParam("marker_keyerhue", "Hue Curves", 2)

    # Add the param to the group, no need to add it to the page
    lastNode.Pre_Grade_Markers.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setCurveColor(0, 0.399, 0.399, 0.399)
    param.deleteAllControlPoints(0)
    param.addControlPoint(0, 0, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
    param.addControlPoint(0, 1, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
    param.addControlPoint(0, 2, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
    param.addControlPoint(0, 3, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
    param.addControlPoint(0, 4, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
    param.addControlPoint(0, 5, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
    param.setCurveColor(1, 0.7115, 0.7115, 0.1645)
    param.deleteAllControlPoints(1)
    param.addControlPoint(1, 0, 0.1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
    param.addControlPoint(1, 1, 0.1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
    param.addControlPoint(1, 2, 0.1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
    param.addControlPoint(1, 3, 0.1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
    param.addControlPoint(1, 4, 0.1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
    param.addControlPoint(1, 5, 0.1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
    lastNode.marker_keyerhue = param
    del param

    param = lastNode.createStringParam("sep12", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the group, no need to add it to the page
    lastNode.Pre_Grade_Markers.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep12 = param
    del param

    param = lastNode.createStringParam("sep13", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the group, no need to add it to the page
    lastNode.Pre_Grade_Markers.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep13 = param
    del param

    param = lastNode.createColorParam("PreGrade_GreenandBlue1white", "Grade Markers", True)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(4, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(4, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(4, 2)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(4, 3)
    param.setDefaultValue(1, 3)
    param.restoreDefaultValue(3)

    # Add the param to the group, no need to add it to the page
    lastNode.Pre_Grade_Markers.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.PreGrade_GreenandBlue1white = param
    del param

    param = lastNode.createStringParam("sep07", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep07 = param
    del param

    param = lastNode.createSeparatorParam("line04", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line04 = param
    del param

    param = lastNode.createGroupParam("Restore_Screen_Color", "Restore Screen Color")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    lastNode.Restore_Screen_Color = param
    del param

    param = lastNode.createColorParam("Restore_redChannel2white", "Restore Channel", True)
    param.setMinimum(0, 0)
    param.setMaximum(4, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(4, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(0, 1)
    param.setMaximum(4, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(4, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(0, 2)
    param.setMaximum(4, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(4, 2)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(0, 3)
    param.setMaximum(4, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(4, 3)
    param.setDefaultValue(1, 3)
    param.restoreDefaultValue(3)

    # Add the param to the group, no need to add it to the page
    lastNode.Restore_Screen_Color.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Restore_redChannel2white = param
    del param

    param = lastNode.createStringParam("sep08", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep08 = param
    del param

    param = lastNode.createSeparatorParam("line05", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line05 = param
    del param

    param = lastNode.createGroupParam("Screen_Keyer", "Screen Keyer")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    lastNode.Screen_Keyer = param
    del param

    param = lastNode.createChoiceParam("Keyer_Choice", "")
    entries = [ ("Green-Screen", ""),
    ("Blue-Screen", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the group, no need to add it to the page
    lastNode.Screen_Keyer.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Keyer_Choice = param
    del param

    param = lastNode.createDoubleParam("ChromaKeyer1keyLift", "Key Lift")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the group, no need to add it to the page
    lastNode.Screen_Keyer.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.ChromaKeyer1keyLift = param
    del param

    param = lastNode.createDoubleParam("ChromaKeyer1keyGain", "Key Gain")
    param.setMinimum(0, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(2, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the group, no need to add it to the page
    lastNode.Screen_Keyer.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.ChromaKeyer1keyGain = param
    del param

    param = lastNode.createStringParam("sep09", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep09 = param
    del param

    param = lastNode.createSeparatorParam("line06", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line06 = param
    del param

    param = lastNode.createGroupParam("Adjust_Matte", "Adjust Matte")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    lastNode.Adjust_Matte = param
    del param

    param = lastNode.createInt2DParam("Dilate_mattesize", "Dilate Matte")
    param.setMinimum(-1000, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(-100, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1000, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(-100, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the group, no need to add it to the page
    lastNode.Adjust_Matte.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Dilate_mattesize = param
    del param

    param = lastNode.createDouble2DParam("Blur_mattesize", "Blur Matte")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the group, no need to add it to the page
    lastNode.Adjust_Matte.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Blur_mattesize = param
    del param

    param = lastNode.createStringParam("sep10", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep10 = param
    del param

    param = lastNode.createStringParam("sep11", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep11 = param
    del param

    lastNode.Credits = lastNode.createPageParam("Credits", "Credits")
    param = lastNode.createStringParam("sep14", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep14 = param
    del param

    param = lastNode.createStringParam("sep15", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep15 = param
    del param

    param = lastNode.createSeparatorParam("mS_MarkerRemoval_Advanced", "mS_MarkerRemoval_Advanced")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.mS_MarkerRemoval_Advanced = param
    del param

    param = lastNode.createStringParam("sep16", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep16 = param
    del param

    param = lastNode.createStringParam("sep17", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep17 = param
    del param

    param = lastNode.createSeparatorParam("line07", "")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line07 = param
    del param

    param = lastNode.createStringParam("sep18", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep18 = param
    del param

    param = lastNode.createStringParam("sep19", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep19 = param
    del param

    param = lastNode.createSeparatorParam("FR", "Version NATRON des Gizmos Nuke développés par Mohamed Selim")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.FR = param
    del param

    param = lastNode.createStringParam("sep20", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep20 = param
    del param

    param = lastNode.createStringParam("sep21", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep21 = param
    del param

    param = lastNode.createSeparatorParam("ANG", "NATRON version of Nuke Gizmos developed by Mohamed Selim")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.ANG = param
    del param

    param = lastNode.createStringParam("sep22", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep22 = param
    del param

    param = lastNode.createStringParam("sep23", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep23 = param
    del param

    param = lastNode.createSeparatorParam("mail", "www.mselim.com")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.mail = param
    del param

    param = lastNode.createStringParam("sep24", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep24 = param
    del param

    param = lastNode.createStringParam("sep25", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep25 = param
    del param

    param = lastNode.createSeparatorParam("FF", "(Fabrice Fernandez - 2016)")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.FF = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'Credits', 'Node'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "marker_keyer"
    lastNode = app.createNode("net.sf.openfx.HueKeyer", 1, group)
    lastNode.setScriptName("marker_keyer")
    lastNode.setLabel("marker_keyer")
    lastNode.setPosition(775, 504)
    lastNode.setSize(80, 43)
    lastNode.setColor(0, 1, 0)
    groupmarker_keyer = lastNode

    param = lastNode.getParam("hue")
    if param is not None:
        param.setCurveColor(0, 0.399, 0.399, 0.399)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
        param.addControlPoint(0, 1, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
        param.addControlPoint(0, 2, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
        param.addControlPoint(0, 3, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
        param.addControlPoint(0, 4, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
        param.addControlPoint(0, 5, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
        param.setCurveColor(1, 0.7115, 0.7115, 0.1645)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0, 0.1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
        param.addControlPoint(1, 1, 0.1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
        param.addControlPoint(1, 2, 0.1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
        param.addControlPoint(1, 3, 0.1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
        param.addControlPoint(1, 4, 0.1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
        param.addControlPoint(1, 5, 0.1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeSmooth)
        del param

    del lastNode
    # End of node "marker_keyer"

    # Start of node "PreGrade_GreenandBlue1"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("PreGrade_GreenandBlue1")
    lastNode.setLabel("PreGrade_GreenandBlue1")
    lastNode.setPosition(361, 758)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.48, 0.66, 1)
    groupPreGrade_GreenandBlue1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "PreGrade_GreenandBlue1"

    # Start of node "PreGrade_RedandBlue1"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("PreGrade_RedandBlue1")
    lastNode.setLabel("PreGrade_RedandBlue1")
    lastNode.setPosition(573, 759)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.48, 0.66, 1)
    groupPreGrade_RedandBlue1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "PreGrade_RedandBlue1"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(806, 631)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "PreGrade_RedandBlue"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("PreGrade_RedandBlue")
    lastNode.setLabel("PreGrade_RedandBlue")
    lastNode.setPosition(899, 759)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.48, 0.66, 1)
    groupPreGrade_RedandBlue = lastNode

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "PreGrade_RedandBlue"

    # Start of node "Grade3"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade3")
    lastNode.setLabel("PreGrade_GreenandBlue")
    lastNode.setPosition(1056, 757)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade3 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade3"

    # Start of node "Pink_on_Blue"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Pink_on_Blue")
    lastNode.setLabel("Pink on Blue")
    lastNode.setPosition(361, 909)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupPink_on_Blue = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Pink_on_Blue"

    # Start of node "Blue_on_Green"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Blue_on_Green")
    lastNode.setLabel("Blue on Green")
    lastNode.setPosition(573, 908)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupBlue_on_Green = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Blue_on_Green"

    # Start of node "Green_on_Blue"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Green_on_Blue")
    lastNode.setLabel("Green on Blue")
    lastNode.setPosition(899, 913)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupGreen_on_Blue = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Green_on_Blue"

    # Start of node "Orange_on_Green"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Orange_on_Green")
    lastNode.setLabel("Orange on Green")
    lastNode.setPosition(1056, 905)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupOrange_on_Green = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Orange_on_Green"

    # Start of node "Restore_redChannel2"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Restore_redChannel2")
    lastNode.setLabel("Restore_redChannel2")
    lastNode.setPosition(361, 1045)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.48, 0.66, 1)
    groupRestore_redChannel2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("white")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    del lastNode
    # End of node "Restore_redChannel2"

    # Start of node "Restore_greenChannel1"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Restore_greenChannel1")
    lastNode.setLabel("Restore_greenChannel1")
    lastNode.setPosition(573, 1049)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.48, 0.66, 1)
    groupRestore_greenChannel1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("white")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    del lastNode
    # End of node "Restore_greenChannel1"

    # Start of node "Restore_greenChannel2"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Restore_greenChannel2")
    lastNode.setLabel("Restore_greenChannel2")
    lastNode.setPosition(899, 1044)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.48, 0.66, 1)
    groupRestore_greenChannel2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("white")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    del lastNode
    # End of node "Restore_greenChannel2"

    # Start of node "Restore_redChannel1"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Restore_redChannel1")
    lastNode.setLabel("Restore_redChannel1")
    lastNode.setPosition(1056, 1042)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.48, 0.66, 1)
    groupRestore_redChannel1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("white")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    del lastNode
    # End of node "Restore_redChannel1"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(773, 1236)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch1"

    # Start of node "Switch2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch2")
    lastNode.setLabel("Switch2")
    lastNode.setPosition(1167, 1229)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch2"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(2540, 2146)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Plate"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Plate")
    lastNode.setLabel("Plate")
    lastNode.setPosition(1409, 141)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupPlate = lastNode

    del lastNode
    # End of node "Plate"

    # Start of node "Markers_Matte"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Markers_Matte")
    lastNode.setLabel("Markers_Matte")
    lastNode.setPosition(137, 152)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupMarkers_Matte = lastNode

    del lastNode
    # End of node "Markers_Matte"

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(137, 1236)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle1 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue(".g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue(".b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue(".a")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "Blur1"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur1")
    lastNode.setLabel("Blur1")
    lastNode.setPosition(137, 1328)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(2, 0)
        param.setValue(2, 1)
        del param

    del lastNode
    # End of node "Blur1"

    # Start of node "Premult1"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult1")
    lastNode.setLabel("Premult1")
    lastNode.setPosition(137, 1426)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult1 = lastNode

    del lastNode
    # End of node "Premult1"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(1409, 1414)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("B")
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(808, 370)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(1454, 370)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Dilate_matte"
    lastNode = app.createNode("net.sf.cimg.CImgDilate", 2, group)
    lastNode.setScriptName("Dilate_matte")
    lastNode.setLabel("Dilate_matte")
    lastNode.setPosition(1409, 1781)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupDilate_matte = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    del lastNode
    # End of node "Dilate_matte"

    # Start of node "Blur_matte"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur_matte")
    lastNode.setLabel("Blur_matte")
    lastNode.setPosition(1409, 1862)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur_matte = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Blur_matte"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(137, 1850)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("stencil")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("stencil")
        del param

    param = lastNode.getParam("AChannelsR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("AChannelsG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("AChannelsB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("OutputChannelsR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("OutputChannelsG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("OutputChannelsB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "Shuffle1_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle1_2")
    lastNode.setLabel("Shuffle1_2")
    lastNode.setPosition(773, 2072)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle1_2 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue(".a")
        del param

    del lastNode
    # End of node "Shuffle1_2"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(184, 2086)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Blur_alpha2"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur_alpha2")
    lastNode.setLabel("Blur_alpha2")
    lastNode.setPosition(773, 2215)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur_alpha2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(2, 0)
        param.setValue(2, 1)
        del param

    del lastNode
    # End of node "Blur_alpha2"

    # Start of node "Premult2"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult2")
    lastNode.setLabel("Premult2")
    lastNode.setPosition(773, 2312)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult2 = lastNode

    del lastNode
    # End of node "Premult2"

    # Start of node "Shuffle2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle2")
    lastNode.setLabel("Shuffle2")
    lastNode.setPosition(1599, 1862)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle2 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle2"

    # Start of node "Shuffle2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle2_2")
    lastNode.setLabel("Shuffle2_2")
    lastNode.setPosition(773, 2464)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle2_2 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle2_2"

    # Start of node "Switch3"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch3")
    lastNode.setLabel("Switch3")
    lastNode.setPosition(2540, 1700)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch3 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch3"

    # Start of node "Merge3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3")
    lastNode.setLabel("Merge3")
    lastNode.setPosition(1801, 2300)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3 = lastNode

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("B")
        del param

    del lastNode
    # End of node "Merge3"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(1846, 370)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "ChromaKeyer_Green"
    lastNode = app.createNode("net.sf.openfx.ChromaKeyerPlugin", 1, group)
    lastNode.setScriptName("ChromaKeyer_Green")
    lastNode.setLabel("ChromaKeyer_Green")
    lastNode.setPosition(1280, 1571)
    lastNode.setSize(104, 66)
    lastNode.setColor(0, 1, 0)
    groupChromaKeyer_Green = lastNode

    param = lastNode.getParam("keyColor")
    if param is not None:
        param.setValue(1, 1)
        del param

    del lastNode
    # End of node "ChromaKeyer_Green"

    # Start of node "Switch_Keyers"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch_Keyers")
    lastNode.setLabel("Switch_Keyers")
    lastNode.setPosition(1409, 1690)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch_Keyers = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch_Keyers"

    # Start of node "ChromaKeyer_Blue"
    lastNode = app.createNode("net.sf.openfx.ChromaKeyerPlugin", 1, group)
    lastNode.setScriptName("ChromaKeyer_Blue")
    lastNode.setLabel("ChromaKeyer_Blue")
    lastNode.setPosition(1536, 1573)
    lastNode.setSize(104, 66)
    lastNode.setColor(0, 1, 0)
    groupChromaKeyer_Blue = lastNode

    param = lastNode.getParam("keyColor")
    if param is not None:
        param.setValue(1, 2)
        del param

    del lastNode
    # End of node "ChromaKeyer_Blue"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(404, 630)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(617, 631)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(944, 631)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(1101, 631)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Now that all nodes are created we can connect them together, restore expressions
    groupmarker_keyer.connectInput(0, groupDot2)
    groupPreGrade_GreenandBlue1.connectInput(0, groupDot6)
    groupPreGrade_GreenandBlue1.connectInput(1, groupDot7)
    groupPreGrade_RedandBlue1.connectInput(0, groupDot7)
    groupPreGrade_RedandBlue1.connectInput(1, groupDot1)
    groupDot1.connectInput(0, groupmarker_keyer)
    groupPreGrade_RedandBlue.connectInput(0, groupDot8)
    groupPreGrade_RedandBlue.connectInput(1, groupDot1)
    groupGrade3.connectInput(0, groupDot9)
    groupGrade3.connectInput(1, groupDot1)
    groupPink_on_Blue.connectInput(1, groupPreGrade_GreenandBlue1)
    groupBlue_on_Green.connectInput(1, groupPreGrade_RedandBlue1)
    groupGreen_on_Blue.connectInput(1, groupPreGrade_RedandBlue)
    groupOrange_on_Green.connectInput(1, groupGrade3)
    groupRestore_redChannel2.connectInput(0, groupPink_on_Blue)
    groupRestore_greenChannel1.connectInput(0, groupBlue_on_Green)
    groupRestore_greenChannel2.connectInput(0, groupGreen_on_Blue)
    groupRestore_redChannel1.connectInput(0, groupOrange_on_Green)
    groupSwitch1.connectInput(0, groupRestore_redChannel1)
    groupSwitch1.connectInput(1, groupRestore_greenChannel2)
    groupSwitch1.connectInput(2, groupRestore_greenChannel1)
    groupSwitch1.connectInput(3, groupRestore_redChannel2)
    groupSwitch2.connectInput(0, groupGrade3)
    groupSwitch2.connectInput(2, groupPreGrade_RedandBlue)
    groupSwitch2.connectInput(3, groupPreGrade_RedandBlue1)
    groupSwitch2.connectInput(4, groupPreGrade_GreenandBlue1)
    groupOutput1.connectInput(0, groupSwitch3)
    groupShuffle1.connectInput(0, groupSwitch1)
    groupShuffle1.connectInput(1, groupMarkers_Matte)
    groupBlur1.connectInput(0, groupShuffle1)
    groupPremult1.connectInput(0, groupBlur1)
    groupMerge1.connectInput(0, groupDot3)
    groupMerge1.connectInput(1, groupPremult1)
    groupDot2.connectInput(0, groupDot3)
    groupDot3.connectInput(0, groupPlate)
    groupDilate_matte.connectInput(0, groupSwitch_Keyers)
    groupBlur_matte.connectInput(0, groupDilate_matte)
    groupMerge2.connectInput(0, groupPremult1)
    groupMerge2.connectInput(1, groupBlur_matte)
    groupShuffle1_2.connectInput(0, groupSwitch1)
    groupShuffle1_2.connectInput(1, groupDot4)
    groupDot4.connectInput(0, groupMerge2)
    groupBlur_alpha2.connectInput(0, groupShuffle1_2)
    groupPremult2.connectInput(0, groupBlur_alpha2)
    groupShuffle2.connectInput(1, groupBlur_matte)
    groupShuffle2_2.connectInput(1, groupPremult2)
    groupSwitch3.connectInput(0, groupDot5)
    groupSwitch3.connectInput(1, groupSwitch2)
    groupSwitch3.connectInput(2, groupSwitch1)
    groupSwitch3.connectInput(3, groupShuffle2)
    groupSwitch3.connectInput(4, groupShuffle2_2)
    groupSwitch3.connectInput(5, groupMerge3)
    groupMerge3.connectInput(0, groupDot5)
    groupMerge3.connectInput(1, groupPremult2)
    groupDot5.connectInput(0, groupDot3)
    groupChromaKeyer_Green.connectInput(0, groupMerge1)
    groupSwitch_Keyers.connectInput(0, groupChromaKeyer_Green)
    groupSwitch_Keyers.connectInput(1, groupChromaKeyer_Blue)
    groupChromaKeyer_Blue.connectInput(0, groupMerge1)
    groupDot6.connectInput(0, groupDot7)
    groupDot7.connectInput(0, groupDot1)
    groupDot8.connectInput(0, groupDot1)
    groupDot9.connectInput(0, groupDot8)

    param = groupmarker_keyer.getParam("hue")
    group.getParam("marker_keyerhue").setAsAlias(param)
    del param
    param = groupPreGrade_GreenandBlue1.getParam("white")
    group.getParam("PreGrade_GreenandBlue1white").setAsAlias(param)
    del param
    param = groupPreGrade_RedandBlue1.getParam("white")
    param.slaveTo(groupPreGrade_GreenandBlue1.getParam("white"), 0, 0)
    param.slaveTo(groupPreGrade_GreenandBlue1.getParam("white"), 1, 1)
    param.slaveTo(groupPreGrade_GreenandBlue1.getParam("white"), 2, 2)
    param.slaveTo(groupPreGrade_GreenandBlue1.getParam("white"), 3, 3)
    del param
    param = groupPreGrade_RedandBlue.getParam("white")
    param.slaveTo(groupPreGrade_GreenandBlue1.getParam("white"), 0, 0)
    param.slaveTo(groupPreGrade_GreenandBlue1.getParam("white"), 1, 1)
    param.slaveTo(groupPreGrade_GreenandBlue1.getParam("white"), 2, 2)
    param.slaveTo(groupPreGrade_GreenandBlue1.getParam("white"), 3, 3)
    del param
    param = groupGrade3.getParam("white")
    param.slaveTo(groupPreGrade_GreenandBlue1.getParam("white"), 0, 0)
    param.slaveTo(groupPreGrade_GreenandBlue1.getParam("white"), 1, 1)
    param.slaveTo(groupPreGrade_GreenandBlue1.getParam("white"), 2, 2)
    param.slaveTo(groupPreGrade_GreenandBlue1.getParam("white"), 3, 3)
    del param
    param = groupRestore_redChannel2.getParam("white")
    group.getParam("Restore_redChannel2white").setAsAlias(param)
    del param
    param = groupRestore_greenChannel1.getParam("white")
    param.slaveTo(groupRestore_redChannel2.getParam("white"), 0, 0)
    param.slaveTo(groupRestore_redChannel2.getParam("white"), 1, 1)
    param.slaveTo(groupRestore_redChannel2.getParam("white"), 2, 2)
    param.slaveTo(groupRestore_redChannel2.getParam("white"), 3, 3)
    del param
    param = groupRestore_greenChannel2.getParam("white")
    param.slaveTo(groupRestore_redChannel2.getParam("white"), 0, 0)
    param.slaveTo(groupRestore_redChannel2.getParam("white"), 1, 1)
    param.slaveTo(groupRestore_redChannel2.getParam("white"), 2, 2)
    param.slaveTo(groupRestore_redChannel2.getParam("white"), 3, 3)
    del param
    param = groupRestore_redChannel1.getParam("white")
    param.slaveTo(groupRestore_redChannel2.getParam("white"), 0, 0)
    param.slaveTo(groupRestore_redChannel2.getParam("white"), 1, 1)
    param.slaveTo(groupRestore_redChannel2.getParam("white"), 2, 2)
    param.slaveTo(groupRestore_redChannel2.getParam("white"), 3, 3)
    del param
    param = groupSwitch1.getParam("which")
    param.setExpression("thisGroup.markersColor.get()", False, 0)
    del param
    param = groupSwitch2.getParam("which")
    param.setExpression("thisGroup.markersColor.get()", False, 0)
    param.slaveTo(groupSwitch1.getParam("which"), 0, 0)
    del param
    param = groupDilate_matte.getParam("size")
    group.getParam("Dilate_mattesize").setAsAlias(param)
    del param
    param = groupBlur_matte.getParam("size")
    group.getParam("Blur_mattesize").setAsAlias(param)
    del param
    param = groupSwitch3.getParam("which")
    param.setExpression("thisGroup.View.get()", False, 0)
    del param
    param = groupChromaKeyer_Green.getParam("keyLift")
    group.getParam("ChromaKeyer1keyLift").setAsAlias(param)
    del param
    param = groupChromaKeyer_Green.getParam("keyGain")
    group.getParam("ChromaKeyer1keyGain").setAsAlias(param)
    del param
    param = groupSwitch_Keyers.getParam("which")
    param.setExpression("thisGroup.Keyer_Choice.getValue()", False, 0)
    del param
    param = groupChromaKeyer_Blue.getParam("keyLift")
    param.slaveTo(groupChromaKeyer_Green.getParam("keyLift"), 0, 0)
    del param
    param = groupChromaKeyer_Blue.getParam("keyGain")
    param.slaveTo(groupChromaKeyer_Green.getParam("keyGain"), 0, 0)
    del param

    try:
        extModule = sys.modules["mS_MarkerRemoval_AdvancedExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
