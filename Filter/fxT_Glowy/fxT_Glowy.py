# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named fxT_GlowyExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from fxT_GlowyExt import *
except ImportError:
    pass

def getPluginID():
    return "natron.community.plugins.fxT_Glowy"

def getLabel():
    return "fxT_Glowy"

def getVersion():
    return 1

def getIconPath():
    return "fxT_Glowy.png"

def getGrouping():
    return "Community/Filter"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "Controls")
    param = lastNode.createStringParam("sep01", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createStringParam("sep02", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createSeparatorParam("fxT_Glowy1", "fxT_Glowy")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.fxT_Glowy1 = param
    del param

    param = lastNode.createStringParam("sep03", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep03 = param
    del param

    param = lastNode.createStringParam("sep04", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep04 = param
    del param

    param = lastNode.createSeparatorParam("line01", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line01 = param
    del param

    param = lastNode.createStringParam("sep05", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep05 = param
    del param

    param = lastNode.createChoiceParam("GLOW_OPERATION", "glow operation")
    entries = [ ("plus", ""),
    ("screen", ""),
    ("under", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.GLOW_OPERATION = param
    del param

    param = lastNode.createStringParam("sep06", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep06 = param
    del param

    param = lastNode.createSeparatorParam("line03", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line03 = param
    del param

    param = lastNode.createColorParam("TINT", "Color tint :", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(4, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(4, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(4, 2)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.TINT = param
    del param

    param = lastNode.createStringParam("sep07", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep07 = param
    del param

    param = lastNode.createSeparatorParam("line04", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line04 = param
    del param

    param = lastNode.createDoubleParam("TOLERANCE", "tolerance")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.7, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.TOLERANCE = param
    del param

    param = lastNode.createDoubleParam("FALLOFF", "falloff")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(4, 0)
    param.setDefaultValue(2.5, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.FALLOFF = param
    del param

    param = lastNode.createDoubleParam("GAIN", "gain")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(4, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.GAIN = param
    del param

    param = lastNode.createStringParam("sep08", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep08 = param
    del param

    param = lastNode.createSeparatorParam("line05", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line05 = param
    del param

    param = lastNode.createDoubleParam("GLOW_RADIUS", "glow radius")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(5, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.GLOW_RADIUS = param
    del param

    param = lastNode.createDoubleParam("glow_saturationsaturation", "Saturation")
    param.setMinimum(0, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(4, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.glow_saturationsaturation = param
    del param

    param = lastNode.createStringParam("sep09", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep09 = param
    del param

    param = lastNode.createSeparatorParam("line06", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line06 = param
    del param

    param = lastNode.createDoubleParam("ANAMORPHIC", "anamorphic stretch")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.ANAMORPHIC = param
    del param

    param = lastNode.createStringParam("sep10", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep10 = param
    del param

    param = lastNode.createSeparatorParam("line02", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line02 = param
    del param

    param = lastNode.createBooleanParam("EFFECT_ONLY", "effect only")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.EFFECT_ONLY = param
    del param

    param = lastNode.createBooleanParam("PRESERVE_ALPHA", "preserve alpha")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.PRESERVE_ALPHA = param
    del param

    param = lastNode.createBooleanParam("INVERT_MASK", "invert mask")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.INVERT_MASK = param
    del param

    param = lastNode.createBooleanParam("Grade1clampWhite", "clamp white")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Grade1clampWhite = param
    del param

    param = lastNode.createBooleanParam("Grade1clampBlack", "clamp black")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.Grade1clampBlack = param
    del param

    param = lastNode.createStringParam("sep11", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep11 = param
    del param

    param = lastNode.createSeparatorParam("line08", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line08 = param
    del param

    param = lastNode.createDoubleParam("GLOW_OPACITY", "glow opacity")
    param.setMinimum(0, 0)
    param.setMaximum(63, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.GLOW_OPACITY = param
    del param

    param = lastNode.createStringParam("sep12", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep12 = param
    del param

    param = lastNode.createStringParam("sep13", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep13 = param
    del param

    lastNode.Credits = lastNode.createPageParam("Credits", "Credits")
    param = lastNode.createStringParam("sep14", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep14 = param
    del param

    param = lastNode.createStringParam("sep15", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep15 = param
    del param

    param = lastNode.createSeparatorParam("fxT_Glowy", "fxT_Glowy")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.fxT_Glowy = param
    del param

    param = lastNode.createStringParam("sep16", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep16 = param
    del param

    param = lastNode.createStringParam("sep17", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep17 = param
    del param

    param = lastNode.createSeparatorParam("line07", "")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line07 = param
    del param

    param = lastNode.createStringParam("sep18", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep18 = param
    del param

    param = lastNode.createStringParam("sep19", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep19 = param
    del param

    param = lastNode.createSeparatorParam("FR", "Version NATRON des Gizmos Nuke développés par Tor Andreassen")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.FR = param
    del param

    param = lastNode.createStringParam("sep20", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep20 = param
    del param

    param = lastNode.createStringParam("sep21", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep21 = param
    del param

    param = lastNode.createSeparatorParam("ANG", "NATRON version of Nuke Gizmos developed by Tor Andreassen")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.ANG = param
    del param

    param = lastNode.createStringParam("sep22", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep22 = param
    del param

    param = lastNode.createStringParam("sep23", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep23 = param
    del param

    param = lastNode.createSeparatorParam("mail", "www.fxtor.net")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.mail = param
    del param

    param = lastNode.createStringParam("sep24", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep24 = param
    del param

    param = lastNode.createStringParam("sep25", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep25 = param
    del param

    param = lastNode.createSeparatorParam("FF", "(Fabrice Fernandez - 2016)")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.FF = param
    del param

    param = lastNode.createStringParam("sep26", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep26 = param
    del param

    param = lastNode.createStringParam("sep27", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep27 = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'Credits', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "tolerance_and_falloff"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("tolerance_and_falloff")
    lastNode.setLabel("tolerance_and_falloff")
    lastNode.setPosition(2021, 890)
    lastNode.setSize(80, 66)
    lastNode.setColor(1, 0.6667, 0)
    grouptolerance_and_falloff = lastNode

    param = lastNode.getParam("blackPoint")
    if param is not None:
        param.setValue(0.7, 0)
        param.setValue(0.7, 1)
        param.setValue(0.7, 2)
        param.setValue(0.7, 3)
        del param

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(4.2, 0)
        param.setValue(4.2, 1)
        param.setValue(4.2, 2)
        param.setValue(4.2, 3)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "tolerance_and_falloff"

    # Start of node "glowController"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("glowController")
    lastNode.setLabel("glowController")
    lastNode.setPosition(1035, 1074)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupglowController = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        del param

    del lastNode
    # End of node "glowController"

    # Start of node "anamorphicValue"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("anamorphicValue")
    lastNode.setLabel("anamorphicValue")
    lastNode.setPosition(1035, 916)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupanamorphicValue = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    del lastNode
    # End of node "anamorphicValue"

    # Start of node "Blur1_2"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur1_2")
    lastNode.setLabel("Blur1_2")
    lastNode.setPosition(1754, 1441)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1_2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(128, 0)
        param.setValue(128, 1)
        del param

    del lastNode
    # End of node "Blur1_2"

    # Start of node "Dot1_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2")
    lastNode.setLabel("Dot1_2")
    lastNode.setPosition(1787, 1219)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2 = lastNode

    del lastNode
    # End of node "Dot1_2"

    # Start of node "Dot2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2_2")
    lastNode.setLabel("Dot2_2")
    lastNode.setPosition(2054, 1219)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2_2 = lastNode

    del lastNode
    # End of node "Dot2_2"

    # Start of node "Dot3_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3_2")
    lastNode.setLabel("Dot3_2")
    lastNode.setPosition(1629, 1216)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3_2 = lastNode

    del lastNode
    # End of node "Dot3_2"

    # Start of node "Dot4_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4_2")
    lastNode.setLabel("Dot4_2")
    lastNode.setPosition(1471, 1216)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4_2 = lastNode

    del lastNode
    # End of node "Dot4_2"

    # Start of node "Dot5_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5_2")
    lastNode.setLabel("Dot5_2")
    lastNode.setPosition(1319, 1216)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5_2 = lastNode

    del lastNode
    # End of node "Dot5_2"

    # Start of node "Dot6_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6_2")
    lastNode.setLabel("Dot6_2")
    lastNode.setPosition(1160, 1216)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6_2 = lastNode

    del lastNode
    # End of node "Dot6_2"

    # Start of node "Dot7_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7_2")
    lastNode.setLabel("Dot7_2")
    lastNode.setPosition(1007, 1217)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7_2 = lastNode

    del lastNode
    # End of node "Dot7_2"

    # Start of node "Dot8_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8_2")
    lastNode.setLabel("Dot8_2")
    lastNode.setPosition(837, 1217)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8_2 = lastNode

    del lastNode
    # End of node "Dot8_2"

    # Start of node "Dot9_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9_2")
    lastNode.setLabel("Dot9_2")
    lastNode.setPosition(685, 1216)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9_2 = lastNode

    del lastNode
    # End of node "Dot9_2"

    # Start of node "Dot10"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot10")
    lastNode.setLabel("Dot10")
    lastNode.setPosition(534, 1214)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot10 = lastNode

    del lastNode
    # End of node "Dot10"

    # Start of node "Blur1_2_2"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur1_2_2")
    lastNode.setLabel("Blur2")
    lastNode.setPosition(1596, 1443)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1_2_2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(64, 0)
        param.setValue(64, 1)
        del param

    del lastNode
    # End of node "Blur1_2_2"

    # Start of node "Blur1_2_2_2"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur1_2_2_2")
    lastNode.setLabel("Blur3")
    lastNode.setPosition(1438, 1444)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1_2_2_2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(32, 0)
        param.setValue(32, 1)
        del param

    del lastNode
    # End of node "Blur1_2_2_2"

    # Start of node "Blur1_2_2_2_2"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur1_2_2_2_2")
    lastNode.setLabel("Blur4")
    lastNode.setPosition(1286, 1448)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1_2_2_2_2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(16, 0)
        param.setValue(16, 1)
        del param

    del lastNode
    # End of node "Blur1_2_2_2_2"

    # Start of node "Blur1_2_2_2_2_2"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur1_2_2_2_2_2")
    lastNode.setLabel("Blur5")
    lastNode.setPosition(1127, 1444)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1_2_2_2_2_2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(8, 0)
        param.setValue(8, 1)
        del param

    del lastNode
    # End of node "Blur1_2_2_2_2_2"

    # Start of node "Blur1_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur1_2_2_2_2_2_2")
    lastNode.setLabel("Blur6")
    lastNode.setPosition(974, 1446)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(4, 0)
        param.setValue(4, 1)
        del param

    del lastNode
    # End of node "Blur1_2_2_2_2_2_2"

    # Start of node "Blur1_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur1_2_2_2_2_2_2_2")
    lastNode.setLabel("Blur7")
    lastNode.setPosition(804, 1440)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(2, 0)
        param.setValue(2, 1)
        del param

    del lastNode
    # End of node "Blur1_2_2_2_2_2_2_2"

    # Start of node "Blur1_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur1_2_2_2_2_2_2_2_2")
    lastNode.setLabel("Blur8")
    lastNode.setPosition(652, 1439)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        del param

    del lastNode
    # End of node "Blur1_2_2_2_2_2_2_2_2"

    # Start of node "Blur1_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur1_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("Blur9")
    lastNode.setPosition(501, 1435)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        del param

    del lastNode
    # End of node "Blur1_2_2_2_2_2_2_2_2_2"

    # Start of node "Merge1_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_2")
    lastNode.setLabel("Merge1_2")
    lastNode.setPosition(652, 1554)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("b")
        del param

    del lastNode
    # End of node "Merge1_2"

    # Start of node "Dot11"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot11")
    lastNode.setLabel("Dot11")
    lastNode.setPosition(534, 1580)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot11 = lastNode

    del lastNode
    # End of node "Dot11"

    # Start of node "Merge1_2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_2_2")
    lastNode.setLabel("Merge1_2_2")
    lastNode.setPosition(804, 1554)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_2_2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("b")
        del param

    del lastNode
    # End of node "Merge1_2_2"

    # Start of node "Merge1_3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_3")
    lastNode.setLabel("Merge1_3")
    lastNode.setPosition(962, 1554)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_3 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("b")
        del param

    del lastNode
    # End of node "Merge1_3"

    # Start of node "Merge1_3_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_3_2")
    lastNode.setLabel("Merge1_3_2")
    lastNode.setPosition(1115, 1554)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_3_2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("b")
        del param

    del lastNode
    # End of node "Merge1_3_2"

    # Start of node "Merge1_3_3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_3_3")
    lastNode.setLabel("Merge1_3_3")
    lastNode.setPosition(1265, 1554)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_3_3 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("b")
        del param

    del lastNode
    # End of node "Merge1_3_3"

    # Start of node "Merge1_3_4"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_3_4")
    lastNode.setLabel("Merge1_3_4")
    lastNode.setPosition(1426, 1554)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_3_4 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("b")
        del param

    del lastNode
    # End of node "Merge1_3_4"

    # Start of node "Merge1_3_5"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_3_5")
    lastNode.setLabel("Merge1_3_5")
    lastNode.setPosition(1584, 1554)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_3_5 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("b")
        del param

    del lastNode
    # End of node "Merge1_3_5"

    # Start of node "Merge1_3_6"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_3_6")
    lastNode.setLabel("Merge1_3_6")
    lastNode.setPosition(1754, 1554)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_3_6 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("b")
        del param

    del lastNode
    # End of node "Merge1_3_6"

    # Start of node "glow_saturation"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("glow_saturation")
    lastNode.setLabel("glow_saturation")
    lastNode.setPosition(2021, 2550)
    lastNode.setSize(80, 43)
    lastNode.setColor(1, 0.6667, 0)
    groupglow_saturation = lastNode

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "glow_saturation"

    # Start of node "Glow"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Glow")
    lastNode.setLabel("Glow")
    lastNode.setPosition(2021, 1963)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupGlow = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("b")
        del param

    del lastNode
    # End of node "Glow"

    # Start of node "Dot12"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot12")
    lastNode.setLabel("Dot12")
    lastNode.setPosition(1775, 1989)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot12 = lastNode

    del lastNode
    # End of node "Dot12"

    # Start of node "Gain_and_Tint"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Gain_and_Tint")
    lastNode.setLabel("Gain_and_Tint")
    lastNode.setPosition(2021, 2136)
    lastNode.setSize(80, 43)
    lastNode.setColor(1, 0.6667, 0)
    groupGain_and_Tint = lastNode

    param = lastNode.getParam("white")
    if param is not None:
        param.setValue(1.1, 0)
        param.setValue(1.1, 1)
        param.setValue(1.1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("multiply")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(0, 3)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Gain_and_Tint"

    # Start of node "Kill_alpha"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Kill_alpha")
    lastNode.setLabel("Kill_alpha")
    lastNode.setPosition(2021, 2352)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3098, 0.3098, 0.3098)
    groupKill_alpha = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("0")
        del param

    del lastNode
    # End of node "Kill_alpha"

    # Start of node "Output1_2"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1_2")
    lastNode.setPosition(2404, 4105)
    lastNode.setSize(80, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1_2 = lastNode

    del lastNode
    # End of node "Output1_2"

    # Start of node "rgba"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("rgba")
    lastNode.setLabel("rgba")
    lastNode.setPosition(2021, 454)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    grouprgba = lastNode

    del lastNode
    # End of node "rgba"

    # Start of node "Glow_plus"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Glow_plus")
    lastNode.setLabel("Glow_plus")
    lastNode.setPosition(2406, 2463)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupGlow_plus = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("b")
        del param

    del lastNode
    # End of node "Glow_plus"

    # Start of node "Dot13"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot13")
    lastNode.setLabel("Dot13")
    lastNode.setPosition(2054, 683)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot13 = lastNode

    del lastNode
    # End of node "Dot13"

    # Start of node "Dot14"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot14")
    lastNode.setLabel("Dot14")
    lastNode.setPosition(2451, 683)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot14 = lastNode

    del lastNode
    # End of node "Dot14"

    # Start of node "Glow_screen"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Glow_screen")
    lastNode.setLabel("Glow_screen")
    lastNode.setPosition(2302, 2616)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupGlow_screen = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("b")
        del param

    del lastNode
    # End of node "Glow_screen"

    # Start of node "Dot15"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot15")
    lastNode.setLabel("Dot15")
    lastNode.setPosition(2451, 2205)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot15 = lastNode

    del lastNode
    # End of node "Dot15"

    # Start of node "Dot16"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot16")
    lastNode.setLabel("Dot16")
    lastNode.setPosition(2347, 2206)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot16 = lastNode

    del lastNode
    # End of node "Dot16"

    # Start of node "Dot17"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot17")
    lastNode.setLabel("Dot17")
    lastNode.setPosition(2040, 2640)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot17 = lastNode

    del lastNode
    # End of node "Dot17"

    # Start of node "Glow_screen_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Glow_screen_2")
    lastNode.setLabel("Glow_screen_2")
    lastNode.setPosition(2196, 2744)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupGlow_screen_2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("under")
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("b")
        del param

    del lastNode
    # End of node "Glow_screen_2"

    # Start of node "Dot18"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot18")
    lastNode.setLabel("Dot18")
    lastNode.setPosition(2241, 2206)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot18 = lastNode

    del lastNode
    # End of node "Dot18"

    # Start of node "Dot19"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot19")
    lastNode.setLabel("Dot19")
    lastNode.setPosition(2040, 2768)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot19 = lastNode

    del lastNode
    # End of node "Dot19"

    # Start of node "operation_switch"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("operation_switch")
    lastNode.setLabel("operation_switch")
    lastNode.setPosition(2406, 2756)
    lastNode.setSize(80, 43)
    lastNode.setColor(1, 1, 1)
    groupoperation_switch = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "operation_switch"

    # Start of node "GlowOpacity"
    lastNode = app.createNode("net.sf.openfx.DissolvePlugin", 1, group)
    lastNode.setScriptName("GlowOpacity")
    lastNode.setLabel("GlowOpacity")
    lastNode.setPosition(2672, 2630)
    lastNode.setSize(80, 43)
    lastNode.setColor(1, 1, 1)
    groupGlowOpacity = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "GlowOpacity"

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(1645, 2367)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle1 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "Clamp1"
    lastNode = app.createNode("net.sf.openfx.Clamp", 2, group)
    lastNode.setScriptName("Clamp1")
    lastNode.setLabel("Clamp1")
    lastNode.setPosition(1645, 2464)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupClamp1 = lastNode

    del lastNode
    # End of node "Clamp1"

    # Start of node "Shuffle2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle2")
    lastNode.setLabel("Shuffle2")
    lastNode.setPosition(1648, 3176)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle2 = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    del lastNode
    # End of node "Shuffle2"

    # Start of node "effect_only"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("effect_only")
    lastNode.setLabel("effect_only")
    lastNode.setPosition(2404, 3413)
    lastNode.setSize(80, 43)
    lastNode.setColor(1, 1, 1)
    groupeffect_only = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "effect_only"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(2040, 3427)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "alpha_switch"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("alpha_switch")
    lastNode.setLabel("alpha_switch")
    lastNode.setPosition(2404, 3750)
    lastNode.setSize(80, 43)
    lastNode.setColor(1, 1, 1)
    groupalpha_switch = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "alpha_switch"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(1681, 3764)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Grade1"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade1")
    lastNode.setLabel("Clamp_BW")
    lastNode.setPosition(2406, 3176)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade1 = lastNode

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade1"

    # Start of node "mask"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("mask")
    lastNode.setLabel("mask")
    lastNode.setPosition(1838, 2254)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmask = lastNode

    del lastNode
    # End of node "mask"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(1838, 2360)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "ErodeBlur1"
    lastNode = app.createNode("eu.cimg.ErodeBlur", 4, group)
    lastNode.setScriptName("ErodeBlur1")
    lastNode.setLabel("ErodeBlur1")
    lastNode.setPosition(1838, 2461)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupErodeBlur1 = lastNode

    del lastNode
    # End of node "ErodeBlur1"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(2021, 2449)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("stencil")
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("b")
        del param

    del lastNode
    # End of node "Merge1"

    # Now that all nodes are created we can connect them together, restore expressions
    grouptolerance_and_falloff.connectInput(0, groupDot13)
    groupglowController.connectInput(0, groupanamorphicValue)
    groupBlur1_2.connectInput(0, groupDot1_2)
    groupDot1_2.connectInput(0, groupDot2_2)
    groupDot2_2.connectInput(0, grouptolerance_and_falloff)
    groupDot3_2.connectInput(0, groupDot1_2)
    groupDot4_2.connectInput(0, groupDot3_2)
    groupDot5_2.connectInput(0, groupDot4_2)
    groupDot6_2.connectInput(0, groupDot5_2)
    groupDot7_2.connectInput(0, groupDot6_2)
    groupDot8_2.connectInput(0, groupDot7_2)
    groupDot9_2.connectInput(0, groupDot8_2)
    groupDot10.connectInput(0, groupDot9_2)
    groupBlur1_2_2.connectInput(0, groupDot3_2)
    groupBlur1_2_2_2.connectInput(0, groupDot4_2)
    groupBlur1_2_2_2_2.connectInput(0, groupDot5_2)
    groupBlur1_2_2_2_2_2.connectInput(0, groupDot6_2)
    groupBlur1_2_2_2_2_2_2.connectInput(0, groupDot7_2)
    groupBlur1_2_2_2_2_2_2_2.connectInput(0, groupDot8_2)
    groupBlur1_2_2_2_2_2_2_2_2.connectInput(0, groupDot9_2)
    groupBlur1_2_2_2_2_2_2_2_2_2.connectInput(0, groupDot10)
    groupMerge1_2.connectInput(0, groupDot11)
    groupMerge1_2.connectInput(1, groupBlur1_2_2_2_2_2_2_2_2)
    groupDot11.connectInput(0, groupBlur1_2_2_2_2_2_2_2_2_2)
    groupMerge1_2_2.connectInput(0, groupMerge1_2)
    groupMerge1_2_2.connectInput(1, groupBlur1_2_2_2_2_2_2_2)
    groupMerge1_3.connectInput(0, groupMerge1_2_2)
    groupMerge1_3.connectInput(1, groupBlur1_2_2_2_2_2_2)
    groupMerge1_3_2.connectInput(0, groupMerge1_3)
    groupMerge1_3_2.connectInput(1, groupBlur1_2_2_2_2_2)
    groupMerge1_3_3.connectInput(0, groupMerge1_3_2)
    groupMerge1_3_3.connectInput(1, groupBlur1_2_2_2_2)
    groupMerge1_3_4.connectInput(0, groupMerge1_3_3)
    groupMerge1_3_4.connectInput(1, groupBlur1_2_2_2)
    groupMerge1_3_5.connectInput(0, groupMerge1_3_4)
    groupMerge1_3_5.connectInput(1, groupBlur1_2_2)
    groupMerge1_3_6.connectInput(0, groupMerge1_3_5)
    groupMerge1_3_6.connectInput(1, groupBlur1_2)
    groupglow_saturation.connectInput(0, groupMerge1)
    groupGlow.connectInput(0, groupDot2_2)
    groupGlow.connectInput(1, groupDot12)
    groupDot12.connectInput(0, groupMerge1_3_6)
    groupGain_and_Tint.connectInput(0, groupGlow)
    groupKill_alpha.connectInput(1, groupGain_and_Tint)
    groupOutput1_2.connectInput(0, groupalpha_switch)
    groupGlow_plus.connectInput(0, groupDot15)
    groupGlow_plus.connectInput(1, groupglow_saturation)
    groupDot13.connectInput(0, grouprgba)
    groupDot14.connectInput(0, groupDot13)
    groupGlow_screen.connectInput(0, groupDot16)
    groupGlow_screen.connectInput(1, groupDot17)
    groupDot15.connectInput(0, groupDot14)
    groupDot16.connectInput(0, groupDot15)
    groupDot17.connectInput(0, groupglow_saturation)
    groupGlow_screen_2.connectInput(0, groupDot18)
    groupGlow_screen_2.connectInput(1, groupDot19)
    groupDot18.connectInput(0, groupDot16)
    groupDot19.connectInput(0, groupDot17)
    groupoperation_switch.connectInput(0, groupGlow_plus)
    groupoperation_switch.connectInput(1, groupGlow_screen)
    groupoperation_switch.connectInput(2, groupGlow_screen_2)
    groupShuffle1.connectInput(1, groupDot13)
    groupClamp1.connectInput(0, groupShuffle1)
    groupShuffle2.connectInput(0, groupClamp1)
    groupShuffle2.connectInput(1, groupGrade1)
    groupeffect_only.connectInput(0, groupGrade1)
    groupeffect_only.connectInput(1, groupDot1)
    groupDot1.connectInput(0, groupDot19)
    groupalpha_switch.connectInput(0, groupeffect_only)
    groupalpha_switch.connectInput(1, groupDot2)
    groupDot2.connectInput(0, groupShuffle2)
    groupGrade1.connectInput(0, groupoperation_switch)
    groupInvert1.connectInput(0, groupmask)
    groupErodeBlur1.connectInput(0, groupInvert1)
    groupMerge1.connectInput(0, groupKill_alpha)
    groupMerge1.connectInput(1, groupErodeBlur1)

    param = grouptolerance_and_falloff.getParam("blackPoint")
    param.setExpression("thisGroup.TOLERANCE.get()", False, 0)
    param.setExpression("thisGroup.TOLERANCE.get()", False, 1)
    param.setExpression("thisGroup.TOLERANCE.get()", False, 2)
    param.setExpression("thisGroup.TOLERANCE.get()", False, 3)
    del param
    param = grouptolerance_and_falloff.getParam("whitePoint")
    param.setExpression("BP = thisGroup.TOLERANCE.get()\nWP = thisGroup.FALLOFF.get()\nret = BP+WP+1", True, 0)
    param.setExpression("BP = thisGroup.TOLERANCE.get()\nWP = thisGroup.FALLOFF.get()\nret = BP+WP+1", True, 1)
    param.setExpression("BP = thisGroup.TOLERANCE.get()\nWP = thisGroup.FALLOFF.get()\nret = BP+WP+1", True, 2)
    param.setExpression("BP = thisGroup.TOLERANCE.get()\nWP = thisGroup.FALLOFF.get()\nret = BP+WP+1", True, 3)
    del param
    param = groupglowController.getParam("size")
    param.setExpression("AnamorphicX = anamorphicValue.size.get()[0]\nret = thisGroup.GLOW_RADIUS.get()+AnamorphicX", True, 0)
    param.setExpression("ret = thisGroup.GLOW_RADIUS.get()", True, 1)
    del param
    param = groupanamorphicValue.getParam("size")
    param.setExpression("ret = thisGroup.ANAMORPHIC.get()", True, 0)
    param.setExpression("AnamorphicY = thisGroup.ANAMORPHIC.get()\nret = AnamorphicY/15", True, 1)
    del param
    param = groupBlur1_2.getParam("size")
    param.setExpression("BlurByValue = glowController.size.get()[0]\nret = BlurByValue*128", True, 0)
    param.setExpression("BlurByValue = glowController.size.get()[1]\nret = BlurByValue*128", True, 1)
    del param
    param = groupBlur1_2_2.getParam("size")
    param.setExpression("BlurByValue = glowController.size.get()[0]\nret = BlurByValue*64", True, 0)
    param.setExpression("BlurByValue = glowController.size.get()[1]\nret = BlurByValue*64", True, 1)
    del param
    param = groupBlur1_2_2_2.getParam("size")
    param.setExpression("BlurByValue = glowController.size.get()[0]\nret = BlurByValue*32", True, 0)
    param.setExpression("BlurByValue = glowController.size.get()[1]\nret = BlurByValue*32", True, 1)
    del param
    param = groupBlur1_2_2_2_2.getParam("size")
    param.setExpression("BlurByValue = glowController.size.get()[0]\nret = BlurByValue*16", True, 0)
    param.setExpression("BlurByValue = glowController.size.get()[1]\nret = BlurByValue*16", True, 1)
    del param
    param = groupBlur1_2_2_2_2_2.getParam("size")
    param.setExpression("BlurByValue = glowController.size.get()[0]\nret = BlurByValue*8", True, 0)
    param.setExpression("BlurByValue = glowController.size.get()[1]\nret = BlurByValue*8", True, 1)
    del param
    param = groupBlur1_2_2_2_2_2_2.getParam("size")
    param.setExpression("BlurByValue = glowController.size.get()[0]\nret = BlurByValue*4", True, 0)
    param.setExpression("BlurByValue = glowController.size.get()[1]\nret = BlurByValue*4", True, 1)
    del param
    param = groupBlur1_2_2_2_2_2_2_2.getParam("size")
    param.setExpression("BlurByValue = glowController.size.get()[0]\nret = BlurByValue*2", True, 0)
    param.setExpression("BlurByValue = glowController.size.get()[1]\nret = BlurByValue*2", True, 1)
    del param
    param = groupBlur1_2_2_2_2_2_2_2_2.getParam("size")
    param.setExpression("BlurByValue = glowController.size.get()[0]\nret = BlurByValue*1", True, 0)
    param.setExpression("Blur8yValue = glowController.size.get()[1]\nret = Blur8yValue*1", True, 1)
    del param
    param = groupBlur1_2_2_2_2_2_2_2_2_2.getParam("size")
    param.setExpression("BlurByValue = glowController.size.get()[0]\nret = BlurByValue*0.5", True, 0)
    param.setExpression("BlurByValue = glowController.size.get()[1]\nret = BlurByValue*0.5", True, 1)
    del param
    param = groupglow_saturation.getParam("saturation")
    group.getParam("glow_saturationsaturation").setAsAlias(param)
    del param
    param = groupGain_and_Tint.getParam("white")
    param.setExpression("G1r = thisGroup.GAIN.get()\nG2r = thisGroup.GLOW_RADIUS.get()\nret = G1r+(G2r/10)", True, 0)
    param.setExpression("G1g = thisGroup.GAIN.get()\nG2g = thisGroup.GLOW_RADIUS.get()\nret = G1g+(G2g/10)", True, 1)
    param.setExpression("G1b = thisGroup.GAIN.get()\nG2b = thisGroup.GLOW_RADIUS.get()\nret = G1b+(G2b/10)", True, 2)
    param.setExpression("G1 = thisNode.white.get()\nG2 = thisGroup.GAIN.get()\nG3 = G2/10\nret = G1+G3", True, 3)
    del param
    param = groupGain_and_Tint.getParam("multiply")
    param.setExpression("thisGroup.TINT.get()[0]", False, 0)
    param.setExpression("thisGroup.TINT.get()[1]", False, 1)
    param.setExpression("thisGroup.TINT.get()[2]", False, 2)
    del param
    param = groupGlow_plus.getParam("mix")
    param.slaveTo(groupGlowOpacity.getParam("which"), 0, 0)
    del param
    param = groupGlow_screen.getParam("mix")
    param.slaveTo(groupGlowOpacity.getParam("which"), 0, 0)
    del param
    param = groupGlow_screen_2.getParam("mix")
    param.slaveTo(groupGlowOpacity.getParam("which"), 0, 0)
    del param
    param = groupoperation_switch.getParam("which")
    param.setExpression("thisGroup.GLOW_OPERATION.get()", False, 0)
    del param
    param = groupGlowOpacity.getParam("which")
    group.getParam("GLOW_OPACITY").setAsAlias(param)
    del param
    param = groupeffect_only.getParam("which")
    param.setExpression("EffectOnly = thisGroup.EFFECT_ONLY.get()\nret = EffectOnly", True, 0)
    del param
    param = groupalpha_switch.getParam("which")
    param.setExpression("AlphaSwitch = thisGroup.PRESERVE_ALPHA.get()\nret = AlphaSwitch", True, 0)
    del param
    param = groupGrade1.getParam("clampBlack")
    group.getParam("Grade1clampBlack").setAsAlias(param)
    del param
    param = groupGrade1.getParam("clampWhite")
    group.getParam("Grade1clampWhite").setAsAlias(param)
    del param
    param = groupInvert1.getParam("disableNode")
    param.setExpression("ret = thisGroup.INVERT_MASK.get()", False, 0)
    del param

    try:
        extModule = sys.modules["fxT_GlowyExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
