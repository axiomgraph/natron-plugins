# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named ChannelOffsetExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from ChannelOffsetExt import *
except ImportError:
    pass

def getPluginID():
    return "natron.community.plugins.ChannelOffset"

def getLabel():
    return "ChannelOffset"

def getVersion():
    return 1

def getIconPath():
    return "ChannelOffset.png"

def getGrouping():
    return "Community/Channel"

def getPluginDescription():
    return "Chaannel offset with additional blur option, and auto-edge extension feature."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "Controls")
    param = lastNode.createStringParam("separator01", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.separator01 = param
    del param

    param = lastNode.createStringParam("separator02", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.separator02 = param
    del param

    param = lastNode.createSeparatorParam("ChannelOffset", "ChannelOffset")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.ChannelOffset = param
    del param

    param = lastNode.createStringParam("separator03", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.separator03 = param
    del param

    param = lastNode.createStringParam("separator04", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.separator04 = param
    del param

    param = lastNode.createSeparatorParam("line01", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line01 = param
    del param

    param = lastNode.createDoubleParam("Red_x", "Red x")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-10, 0)
    param.setDisplayMaximum(10, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Red_x = param
    del param

    param = lastNode.createDoubleParam("Red_y", "Red y")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-10, 0)
    param.setDisplayMaximum(10, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Red_y = param
    del param

    param = lastNode.createDouble2DParam("Red_blur", "Red blur")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Red_blur = param
    del param

    param = lastNode.createSeparatorParam("line04", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line04 = param
    del param

    param = lastNode.createDoubleParam("Green_x", "Green x")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-10, 0)
    param.setDisplayMaximum(10, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Green_x = param
    del param

    param = lastNode.createDoubleParam("Green_y", "Green y")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-10, 0)
    param.setDisplayMaximum(10, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Green_y = param
    del param

    param = lastNode.createDouble2DParam("Green_blur", "Green blur")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Green_blur = param
    del param

    param = lastNode.createSeparatorParam("line05", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line05 = param
    del param

    param = lastNode.createDoubleParam("Blue_x", "Blue x")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-10, 0)
    param.setDisplayMaximum(10, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Blue_x = param
    del param

    param = lastNode.createDoubleParam("Blue_y", "Blue y")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-10, 0)
    param.setDisplayMaximum(10, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Blue_y = param
    del param

    param = lastNode.createDouble2DParam("Blur_BLUEsize", "Blue blur")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Blur_BLUEsize = param
    del param

    param = lastNode.createStringParam("separator05", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.separator05 = param
    del param

    param = lastNode.createStringParam("separator06", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.separator06 = param
    del param

    lastNode.Credits = lastNode.createPageParam("Credits", "Credits")
    param = lastNode.createStringParam("separator19", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.separator19 = param
    del param

    param = lastNode.createStringParam("separator20", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.separator20 = param
    del param

    param = lastNode.createSeparatorParam("line02", "ChannelOffset")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line02 = param
    del param

    param = lastNode.createStringParam("separator21", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.separator21 = param
    del param

    param = lastNode.createStringParam("separator22", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.separator22 = param
    del param

    param = lastNode.createSeparatorParam("line03", "")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line03 = param
    del param

    param = lastNode.createStringParam("separator23", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.separator23 = param
    del param

    param = lastNode.createStringParam("separator24", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.separator24 = param
    del param

    param = lastNode.createSeparatorParam("FR", "Version NATRON des Gizmos Nuke développés par Jason M. Bergman")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.FR = param
    del param

    param = lastNode.createStringParam("separator25", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.separator25 = param
    del param

    param = lastNode.createStringParam("separator26", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.separator26 = param
    del param

    param = lastNode.createSeparatorParam("ENG", "NATRON version of Nuke Gizmos developed by Jason M. Bergman")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.ENG = param
    del param

    param = lastNode.createStringParam("separator27", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.separator27 = param
    del param

    param = lastNode.createStringParam("separator28", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.separator28 = param
    del param

    param = lastNode.createSeparatorParam("mail", "www.jasonmbergman.com/NUKE-TOOLS")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.mail = param
    del param

    param = lastNode.createStringParam("separator29", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.separator29 = param
    del param

    param = lastNode.createStringParam("separator30", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.separator30 = param
    del param

    param = lastNode.createSeparatorParam("vonversion", " (Fabrice Fernandez - 2016)")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.vonversion = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'Credits', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Input1"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Input1")
    lastNode.setLabel("Input1")
    lastNode.setPosition(965, 128)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupInput1 = lastNode

    del lastNode
    # End of node "Input1"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(1432, 2186)
    lastNode.setSize(80, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "RED"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("RED")
    lastNode.setLabel("RED")
    lastNode.setPosition(610, 496)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupRED = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("1")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("0")
        del param

    del lastNode
    # End of node "RED"

    # Start of node "Dot1_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2")
    lastNode.setLabel("Dot1_2")
    lastNode.setPosition(655, 349)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2 = lastNode

    del lastNode
    # End of node "Dot1_2"

    # Start of node "Dot2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2_2")
    lastNode.setLabel("Dot2_2")
    lastNode.setPosition(998, 349)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2_2 = lastNode

    del lastNode
    # End of node "Dot2_2"

    # Start of node "GREEN"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("GREEN")
    lastNode.setLabel("GREEN")
    lastNode.setPosition(953, 490)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupGREEN = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("1")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("0")
        del param

    del lastNode
    # End of node "GREEN"

    # Start of node "BLUE"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("BLUE")
    lastNode.setLabel("BLUE")
    lastNode.setPosition(1301, 494)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupBLUE = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("1")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("0")
        del param

    del lastNode
    # End of node "BLUE"

    # Start of node "Dot3_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3_2")
    lastNode.setLabel("Dot3_2")
    lastNode.setPosition(1346, 353)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3_2 = lastNode

    del lastNode
    # End of node "Dot3_2"

    # Start of node "Shuffle_RED"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle_RED")
    lastNode.setLabel("Shuffle_RED")
    lastNode.setPosition(757, 496)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupShuffle_RED = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "Shuffle_RED"

    # Start of node "Premult1"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult1")
    lastNode.setLabel("Premult1")
    lastNode.setPosition(757, 563)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.2941, 0.3686, 0.7765)
    groupPremult1 = lastNode

    del lastNode
    # End of node "Premult1"

    # Start of node "Shuffle_GREEN"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle_GREEN")
    lastNode.setLabel("Shuffle_GREEN")
    lastNode.setPosition(1091, 490)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupShuffle_GREEN = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    del lastNode
    # End of node "Shuffle_GREEN"

    # Start of node "Shuffle_BLUE"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle_BLUE")
    lastNode.setLabel("Shuffle_BLUE")
    lastNode.setPosition(1454, 494)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupShuffle_BLUE = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "Shuffle_BLUE"

    # Start of node "Premult1_2"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult1_2")
    lastNode.setLabel("Premult1_2")
    lastNode.setPosition(1091, 565)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.2941, 0.3686, 0.7765)
    groupPremult1_2 = lastNode

    del lastNode
    # End of node "Premult1_2"

    # Start of node "Premult1_3"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult1_3")
    lastNode.setLabel("Premult1_3")
    lastNode.setPosition(1454, 566)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.2941, 0.3686, 0.7765)
    groupPremult1_3 = lastNode

    del lastNode
    # End of node "Premult1_3"

    # Start of node "Transform_RED"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform_RED")
    lastNode.setLabel("Transform_RED")
    lastNode.setPosition(757, 768)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform_RED = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform_RED"

    # Start of node "Shuffle_alpha1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle_alpha1")
    lastNode.setLabel("Shuffle_alpha1")
    lastNode.setPosition(757, 675)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupShuffle_alpha1 = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("1")
        del param

    del lastNode
    # End of node "Shuffle_alpha1"

    # Start of node "Shuffle_alpha2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle_alpha2")
    lastNode.setLabel("Shuffle_alpha2")
    lastNode.setPosition(1091, 656)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupShuffle_alpha2 = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("1")
        del param

    del lastNode
    # End of node "Shuffle_alpha2"

    # Start of node "Shuffle_alpha13"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle_alpha13")
    lastNode.setLabel("Shuffle_alpha13")
    lastNode.setPosition(1454, 640)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupShuffle_alpha13 = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("1")
        del param

    del lastNode
    # End of node "Shuffle_alpha13"

    # Start of node "CopyRectangle1"
    lastNode = app.createNode("net.sf.openfx.CopyRectanglePlugin", 2, group)
    lastNode.setScriptName("CopyRectangle1")
    lastNode.setLabel("CopyRectangle1")
    lastNode.setPosition(769, 1148)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.2941, 0.3686, 0.7765)
    groupCopyRectangle1 = lastNode

    del lastNode
    # End of node "CopyRectangle1"

    # Start of node "Dot4_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4_2")
    lastNode.setLabel("Dot4_2")
    lastNode.setPosition(655, 1162)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4_2 = lastNode

    del lastNode
    # End of node "Dot4_2"

    # Start of node "CopyRectangle2"
    lastNode = app.createNode("net.sf.openfx.CopyRectanglePlugin", 2, group)
    lastNode.setScriptName("CopyRectangle2")
    lastNode.setLabel("CopyRectangle2")
    lastNode.setPosition(1103, 1146)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.2941, 0.3686, 0.7765)
    groupCopyRectangle2 = lastNode

    del lastNode
    # End of node "CopyRectangle2"

    # Start of node "Dot6_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6_2")
    lastNode.setLabel("Dot6_2")
    lastNode.setPosition(998, 1160)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6_2 = lastNode

    del lastNode
    # End of node "Dot6_2"

    # Start of node "Transform_GREEN"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform_GREEN")
    lastNode.setLabel("Transform_GREEN")
    lastNode.setPosition(1091, 761)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform_GREEN = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    del lastNode
    # End of node "Transform_GREEN"

    # Start of node "Transform_BLUE"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform_BLUE")
    lastNode.setLabel("Transform_BLUE")
    lastNode.setPosition(1454, 750)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform_BLUE = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    del lastNode
    # End of node "Transform_BLUE"

    # Start of node "CopyRectangle2_2"
    lastNode = app.createNode("net.sf.openfx.CopyRectanglePlugin", 2, group)
    lastNode.setScriptName("CopyRectangle2_2")
    lastNode.setLabel("CopyRectangle2_2")
    lastNode.setPosition(1461, 1121)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.2941, 0.3686, 0.7765)
    groupCopyRectangle2_2 = lastNode

    del lastNode
    # End of node "CopyRectangle2_2"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(1346, 1147)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Start of node "EdgeExtend_R"
    lastNode = app.createNode("eu.cimg.EdgeExtend", 4, group)
    lastNode.setScriptName("EdgeExtend_R")
    lastNode.setLabel("EdgeExtend_R")
    lastNode.setPosition(769, 980)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupEdgeExtend_R = lastNode

    param = lastNode.getParam("edgeExtendSize")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "EdgeExtend_R"

    # Start of node "Blur_RED"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur_RED")
    lastNode.setLabel("Blur_RED")
    lastNode.setPosition(769, 1322)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur_RED = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("boundary")
    if param is not None:
        param.set("nearest")
        del param

    del lastNode
    # End of node "Blur_RED"

    # Start of node "Blur_GREEN"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur_GREEN")
    lastNode.setLabel("Blur_GREEN")
    lastNode.setPosition(1091, 1318)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur_GREEN = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("boundary")
    if param is not None:
        param.set("nearest")
        del param

    del lastNode
    # End of node "Blur_GREEN"

    # Start of node "Blur_BLUE"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur_BLUE")
    lastNode.setLabel("Blur_BLUE")
    lastNode.setPosition(1461, 1320)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur_BLUE = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("boundary")
    if param is not None:
        param.set("nearest")
        del param

    del lastNode
    # End of node "Blur_BLUE"

    # Start of node "Merge_RG"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge_RG")
    lastNode.setLabel("Merge_RG")
    lastNode.setPosition(1091, 1554)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.2941, 0.3686, 0.7765)
    groupMerge_RG = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("b")
        del param

    del lastNode
    # End of node "Merge_RG"

    # Start of node "Dot10"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot10")
    lastNode.setLabel("Dot10")
    lastNode.setPosition(802, 1580)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot10 = lastNode

    del lastNode
    # End of node "Dot10"

    # Start of node "Merge_B"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge_B")
    lastNode.setLabel("Merge_B")
    lastNode.setPosition(1461, 1554)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.2941, 0.3686, 0.7765)
    groupMerge_B = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("b")
        del param

    del lastNode
    # End of node "Merge_B"

    # Start of node "EdgeExtend_G"
    lastNode = app.createNode("eu.cimg.EdgeExtend", 4, group)
    lastNode.setScriptName("EdgeExtend_G")
    lastNode.setLabel("EdgeExtend_G")
    lastNode.setPosition(1103, 971)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupEdgeExtend_G = lastNode

    param = lastNode.getParam("edgeExtendSize")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "EdgeExtend_G"

    # Start of node "EdgeExtend_B"
    lastNode = app.createNode("eu.cimg.EdgeExtend", 4, group)
    lastNode.setScriptName("EdgeExtend_B")
    lastNode.setLabel("EdgeExtend_B")
    lastNode.setPosition(1467, 966)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupEdgeExtend_B = lastNode

    param = lastNode.getParam("edgeExtendSize")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "EdgeExtend_B"

    # Start of node "mask"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("mask")
    lastNode.setLabel("mask")
    lastNode.setPosition(357, 133)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmask = lastNode

    del lastNode
    # End of node "mask"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(1763, 353)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(357, 335)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupShuffle1 = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(357, 668)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(1777, 1832)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(390, 1839)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Shuffle2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle2")
    lastNode.setLabel("Shuffle2")
    lastNode.setPosition(1767, 1152)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupShuffle2 = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("1")
        del param

    del lastNode
    # End of node "Shuffle2"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(1432, 1899)
    lastNode.setSize(80, 73)
    lastNode.setColor(0.2941, 0.3686, 0.7765)
    groupMerge2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("matte")
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("b")
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "Shuffle3"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle3")
    lastNode.setLabel("Shuffle3")
    lastNode.setPosition(1613, 1815)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupShuffle3 = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    del lastNode
    # End of node "Shuffle3"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupMerge2)
    groupRED.connectInput(1, groupDot1_2)
    groupDot1_2.connectInput(0, groupDot2_2)
    groupDot2_2.connectInput(0, groupInput1)
    groupGREEN.connectInput(1, groupDot2_2)
    groupBLUE.connectInput(1, groupDot3_2)
    groupDot3_2.connectInput(0, groupDot2_2)
    groupShuffle_RED.connectInput(0, groupDot1_2)
    groupShuffle_RED.connectInput(1, groupRED)
    groupPremult1.connectInput(0, groupShuffle_RED)
    groupShuffle_GREEN.connectInput(0, groupDot2_2)
    groupShuffle_GREEN.connectInput(1, groupGREEN)
    groupShuffle_BLUE.connectInput(0, groupDot3_2)
    groupShuffle_BLUE.connectInput(1, groupBLUE)
    groupPremult1_2.connectInput(0, groupShuffle_GREEN)
    groupPremult1_3.connectInput(0, groupShuffle_BLUE)
    groupTransform_RED.connectInput(0, groupShuffle_alpha1)
    groupShuffle_alpha1.connectInput(1, groupPremult1)
    groupShuffle_alpha2.connectInput(1, groupPremult1_2)
    groupShuffle_alpha13.connectInput(1, groupPremult1_3)
    groupCopyRectangle1.connectInput(0, groupDot4_2)
    groupCopyRectangle1.connectInput(1, groupEdgeExtend_R)
    groupDot4_2.connectInput(0, groupRED)
    groupCopyRectangle2.connectInput(0, groupDot6_2)
    groupCopyRectangle2.connectInput(1, groupEdgeExtend_G)
    groupDot6_2.connectInput(0, groupGREEN)
    groupTransform_GREEN.connectInput(0, groupShuffle_alpha2)
    groupTransform_BLUE.connectInput(0, groupShuffle_alpha13)
    groupCopyRectangle2_2.connectInput(0, groupDot9)
    groupCopyRectangle2_2.connectInput(1, groupEdgeExtend_B)
    groupDot9.connectInput(0, groupBLUE)
    groupEdgeExtend_R.connectInput(0, groupTransform_RED)
    groupBlur_RED.connectInput(0, groupCopyRectangle1)
    groupBlur_GREEN.connectInput(0, groupCopyRectangle2)
    groupBlur_BLUE.connectInput(0, groupCopyRectangle2_2)
    groupMerge_RG.connectInput(0, groupDot10)
    groupMerge_RG.connectInput(1, groupBlur_GREEN)
    groupDot10.connectInput(0, groupBlur_RED)
    groupMerge_B.connectInput(0, groupMerge_RG)
    groupMerge_B.connectInput(1, groupBlur_BLUE)
    groupEdgeExtend_G.connectInput(0, groupTransform_GREEN)
    groupEdgeExtend_B.connectInput(0, groupTransform_BLUE)
    groupDot1.connectInput(0, groupDot3_2)
    groupShuffle1.connectInput(0, groupmask)
    groupShuffle1.connectInput(1, groupDot1_2)
    groupInvert1.connectInput(0, groupmask)
    groupDot2.connectInput(0, groupShuffle2)
    groupDot3.connectInput(0, groupInvert1)
    groupShuffle2.connectInput(1, groupDot1)
    groupMerge2.connectInput(0, groupMerge_B)
    groupMerge2.connectInput(1, groupShuffle3)
    groupShuffle3.connectInput(0, groupDot3)
    groupShuffle3.connectInput(1, groupDot2)

    param = groupTransform_RED.getParam("translate")
    param.setExpression("thisGroup.Red_x.get()", False, 0)
    param.setExpression("thisGroup.Red_y.get()", False, 1)
    del param
    param = groupTransform_GREEN.getParam("translate")
    param.setExpression("thisGroup.Green_x.get()", False, 0)
    param.setExpression("thisGroup.Green_y.get()", False, 1)
    del param
    param = groupTransform_BLUE.getParam("translate")
    param.setExpression("thisGroup.Blue_x.get()", False, 0)
    param.setExpression("thisGroup.Blue_y.get()", False, 1)
    del param
    param = groupEdgeExtend_R.getParam("edgeExtendSize")
    param.setExpression("Edgex1_X = Transform_RED.translate.get().x\nEdgex1_Y = Transform_RED.translate.get().y\n\nif Edgex1_X >= Edgex1_Y:\n\tresult = Edgex1_X\nelse: result = Edgex1_Y\nret = result", True, 0)
    del param
    param = groupBlur_RED.getParam("size")
    group.getParam("Red_blur").setAsAlias(param)
    del param
    param = groupBlur_GREEN.getParam("size")
    group.getParam("Green_blur").setAsAlias(param)
    del param
    param = groupBlur_BLUE.getParam("size")
    group.getParam("Blur_BLUEsize").setAsAlias(param)
    del param
    param = groupEdgeExtend_G.getParam("edgeExtendSize")
    param.setExpression("Edgex2_X = Transform_GREEN.translate.get().x\nEdgex2_Y = Transform_GREEN.translate.get().y\n\nif Edgex2_X >= Edgex2_Y:\n\tresult = Edgex2_X\nelse: result = Edgex2_Y\nret = result", True, 0)
    del param
    param = groupEdgeExtend_B.getParam("edgeExtendSize")
    param.setExpression("Edgex3_X = Transform_BLUE.translate.get().x\nEdgex3_Y = Transform_BLUE.translate.get().y\n\nif Edgex3_X >= Edgex3_Y:\n\tresult = Edgex3_X\nelse: result = Edgex3_Y\nret = result", True, 0)
    del param

    try:
        extModule = sys.modules["ChannelOffsetExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
